---
title: "STAT 331 Portfolio"
author: "Kailyn Kragas"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
# Lab 5 (Question 1)
surveys <- read_csv(here::here("Labs", "Lab 2", "surveys.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
# Practice Activity 4 (Question 1)
library(readxl) 
library(tidyverse)

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending"  , 
                      skip = 6, 
                      n_max = 186)
```

-   `txt`

```{r wd-1-txt}
# Practice Activity 5.2
message <- read_csv(here::here("data", "scrambled_message.txt"))
```

**WD-2: I can select necessary columns from a data set.**

```{r wd-2}
# Lab 5 (Question 2.2)
timeSummary <- surveys |> 
  select(year, genus, weight) |> 
  group_by(year, genus) |>
  summarise(meanWeight = mean(weight))
```

**WD-3: I can filter rows from a data frame for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
# Lab 3 (Question 11)
summary1 <- hiphop_clean |> filter(age < 20) |> 
  group_by(word) |> 
  summarise(meanFamiliarity = mean(familiarity))
```

-   character -- specifically a string

```{r wd-3-string}
# Practice Activity 5.2 (Question 3)
message <- message %>%
  filter(!str_detect(Word, "ugh+[:punct:]"))
```

-   factor

```{r wd-3-factor}
# Lab 3 (Question 12)
summary2 <- hiphop_clean |> filter(sex == "Female", 
                       ethnic_2 == "non-white") |> 
  group_by(word) |>
  summarise(meanFamiliarity = mean(familiarity))

summary2 |> slice_min(meanFamiliarity)
summary2 |> slice_max(meanFamiliarity)
```

-   date

```{r wd-3-date}
# Practice Activity 5.1 (Question 1)
suspects <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, tzone = "America/Los_Angeles"))

suspects <- suspects |>
  filter(pm(Time.Spotted))
```

**WD-4: I can modify existing variables and create new variables in a data frame for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# Practice Activity 5.1 (Question 6)
other_time = ymd("1970-01-01")

suspects_ |>
  mutate(diff = difftime(Time.Spotted, other_time, units = "mins"),
         diff = as.integer(diff)) |>
  filter((diff %% 10) == 0)
```

-   character -- specifically a string

```{r wd-4-string}
# Lab 8 (Part 1)
pluralize_gift <- function(gift) {

  gift <- gift |>
    str_c(string = "s", sep = "") |>
    str_replace(pattern = "ys$", replacement = "ies") |>
    str_replace(pattern = "gooses$", replacement = "geese")
  
  return(gift)

}
```

-   factor

```{r wd-4-factor}
# Lab 5 (Question 3.3)
weekDays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekEnd <- c("Sat", "Sun")

collapsedDay <- surveys |> 
  mutate(day = fct_collapse(day_of_week, 
                            "Weekday" = weekDays, "Weekend" = weekEnd)) |> 
  filter(!is.na(day))
```

-   date

```{r wd-4-date}
# Practice Activity 5.1 (Question 1)
suspects <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, tzone = "America/Los_Angeles"))

suspects <- suspects |>
  filter(pm(Time.Spotted))
```

**WD-5: I can use mutating joins to combine multiple data frames.**

-   `left_join()`

```{r wd-5-left}
# Preview Activity 4.3 (Question b)
qB <- left_join(prof_course, prof_info)
```

-   `right_join()`

```{r wd-5-right}
# Preview Activity 4.3 (Question b)
qB2 <- right_join(prof_info, prof_course)
```

-   `inner_join()`

```{r wd-5-inner}
# Preview Activity 4.3 (Question a)
qA <- inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}
# Challenge 4 (Part 1)
# collapse the data set to only include observations with these regions and compute for means
california <- avocado |>
  filter(region %in% c("LosAngeles", "SanDiego", 
                       "Sacramento", "SanFrancisco")) |> 
  group_by(region) |>
  summarise(avgPrice = mean(AveragePrice),
            avgVolume = mean(`Total Volume`))

# source: https://www.ramseysolutions.com/real-estate/cost-of-living-in-california
housingPrices <- tibble(region = c("SanFrancisco", "LosAngeles", 
                                   "SanDiego", "Sacramento"), 
                       avgHouse = c(1297511, 816438, 800746, 440447),
                       avgRent = c(4200, 2800, 2391, 1904))

# combine the summaries to make a plot
californiaData <- california |> 
  full_join(housingPrices, by = "region")
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}
# Lab 9 (Spelling By State: Part 1)
filters <- tibble(Name = c("Allan", "Alan", "Allen"))

als <- aNames |>
  semi_join(filters, by = "Name")

```

-   `anti_join()`

```{r wd-6-anti}
# Practice Activity 4 (Question 4)
filtered_military <- military_clean |>
  anti_join(cont_region, by = c("Country" = "Region"))
```

**WD-7: I can pivot dataframes from long to wide and vise versa**

-   `pivot_longer()`

```{r wd-7-long}
# Lab 7 (Part 3.4)
plusRescale <- fishData |> 
  mutate(`Rescaled Length` = rescale_01(length)) |>
  rename(Length = length)

plusRescale |> pivot_longer(cols = c(Length, `Rescaled Length`), 
               names_to = "Type", 
               values_to = "Length") |>
  ggplot(mapping = aes(x = year, y = Length)) +
  geom_smooth() +
  facet_grid(Type ~ ., scales="free") +
  labs(title = "Rescaled vs. Original Fish Length Values From 1989 to 2006") +
  theme_linedraw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(), 
        plot.title = element_text(face = "bold"))
```

-   `pivot_wider()`

```{r wd-7-wide}
# Lab 9 (Part 1, revised - values_fill())
allisonsSummary <- aNames %>%
  filter(Name == "Allison") %>% 
  group_by(State, Sex) %>%
  summarise(Allisons = sum(Count)) %>%
  pivot_wider(names_from = Sex, values_from = Allisons, values_fill = 0)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 1 - Lab 9

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
# Lab 9 (Part 1, revised - values_fill())
allisonsSummary <- aNames %>%
  filter(Name == "Allison") %>% 
  group_by(State, Sex) %>%
  summarise(Allisons = sum(Count)) %>%
  pivot_wider(names_from = Sex, values_from = Allisons, values_fill = 0)
```

-   Example 2

```{r r-2-2}
# Lab 9 (Part 3)
allison_Years %>% 
  ggplot(mapping = aes(x = Year, y = Allisons)) +
  geom_line() + 
  labs(title = "Number Of Allisons Throughout 1997 to 2014") +
  theme_linedraw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(), 
        plot.title = element_text(face = "bold"), 
        panel.background = element_rect(fill = "lightgrey"))

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}
# Lab 7 (Question 3.2)
rescale_01 <- function(x) {
  
  stopifnot(is.numeric(x), length(x) > 1)
  
  min <- min(x, na.rm = TRUE)
  max <- max(x, na.rm = TRUE)
  
  new <- (x - min) / 
         (max - min)
  
  return(new)
}
```

-   Example 2

```{r r-3-2}
# Lab 9 (Part 1, revised - values_fill())
allisonsSummary <- aNames %>%
  filter(Name == "Allison") %>% 
  group_by(State, Sex) %>%
  summarise(Allisons = sum(Count)) %>%
  pivot_wider(names_from = Sex, values_from = Allisons, values_fill = 0)
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
# Lab 2 (Question 6)
ggplot(data = surveys, 
       mapping = aes(x = weight, 
                     y = hindfoot_length)) +
   geom_jitter(alpha = 0.5) +
   labs(x = "Rodent Weight (g)", 
       y = "Hindfoot Length (mm)")
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}
# Lab 7 (Part 3.4)
plusRescale <- fishData |> 
  mutate(`Rescaled Length` = rescale_01(length)) |>
  rename(Length = length)

plusRescale |> pivot_longer(cols = c(Length, `Rescaled Length`), 
               names_to = "Type", 
               values_to = "Length") |>
  ggplot(mapping = aes(x = year, y = Length)) +
  geom_smooth() +
  facet_grid(Type ~ ., scales="free") +
  labs(title = "Rescaled vs. Original Fish Length Values From 1989 to 2006") +
  theme_linedraw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(), 
        plot.title = element_text(face = "bold"))
```

-   categorical variables

```{r dvs-2-cat}
# Lab 5 (Question 3.2)
# Counting the frequency of a categorical variable
weekDays <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")

ggplot(data = captures, mapping = aes(x = factor(day_of_week, weekDays))) +
  geom_bar(stat = "count", fill = "lightseagreen") + 
  labs(x = "Days of The Week",
       title = "Total Number of Rodents Captured Across the Days of The Week") +
  theme_classic() +
  theme(axis.title.y = element_blank(),
        plot.title = element_text(face = "bold"),
        axis.text = element_text(size = 8))
```

-   dates

```{r dvs-2-date}
# Lab 5 (Question 4)
ggplot(data = timeSummary, 
       mapping = aes(x = year,
                     y = meanWeight,
                     color = fct_reorder(genus, meanWeight, .desc = TRUE))) + 
  geom_line() + 
  labs(x = "Years",
       title = "Mean Weight (g) of Different Rodent Genuses From 1979 - 2002", 
       color = "Rodent Genus") + 
  theme_light() + 
  theme(axis.title.y = element_blank(),
        plot.title = element_text(face = "bold"),
        axis.text = element_text(size = 7)) 
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
# Lab 5 (Question 1.2)
ggplot(data = surveys,
  mapping = aes(x = weight, 
                y = fct_reorder(species, weight))) + 
  geom_jitter(color = "darkseagreen", 
              size = 0.5, 
              alpha = 0.5) + 
  geom_boxplot(alpha = 0.1, 
               outlier.shape = NA) + 
  labs(x = "Weight (g)",
       title = "Weight Distribution Within Different Rodent Species") +
  theme_classic() +
  theme(axis.title.y = element_blank(), 
        plot.title = element_text(face = "bold",
                                  size = 15)) 
```

-   Example 2

```{r dvs-2-2}
# Challenge 07 (Part 3)
newData |> mutate(species = case_when(species == "RBT" ~ "Rainbow",
                                      species == "WCT" ~ "Westslope Cutthroat",
                                      TRUE ~ species),
                  species = str_c(species, " ", "Trout" )) |>
  group_by(year, species, section) |>
  summarize(meanCondition = mean(condition, na.rm = TRUE)) |>
  ggplot(mapping = aes(x = year, y = meanCondition, color = section)) +
  geom_line() +
  facet_wrap(~species) +
  theme_linedraw() +
  labs(title = "The Average Condition Of Trout Species in Different Sections From 1989 to 2006",
       x = "Years",
      color = "Section") +
  theme(axis.title.y = element_blank(),
        plot.title = element_text(face = "bold",
                                  size = 12),
        axis.text = element_text(size = 8)) 
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
# Lab 7 (Question 3.4)
plusRescale <- fishData |> 
  mutate(`Rescaled Length` = rescale_01(length)) |>
  rename(Length = length)

plusRescale |> 
  pivot_longer(cols = c(Length, `Rescaled Length`), 
               names_to = "Type", 
               values_to = "Length") |>
  ggplot(mapping = aes(x = year, y = Length)) +
  geom_smooth() +
  facet_grid(Type ~ ., scales="free") +
  labs(title = "Rescaled vs. Original Fish Length Values From 1989 to 2006") +
  theme_linedraw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(), 
        plot.title = element_text(face = "bold"))
```

-   Example 2

```{r dvs-3-2}
# Challenge 2 (Part 2)
ggplot(data = surveys,
  mapping = aes(x = species, 
                y = weight,
                color = genus)) + 
  geom_jitter(size = 0.5, 
              alpha = 0.5) + 
  geom_boxplot(alpha = 0.1, 
               outlier.shape = NA)  +
  labs(x = "Penguin Weight (g)", 
       y = "Penguin Species", 
       title = "The Weight Distribution of Penguins Across Different Species", 
       color = "Genus") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  # RColorBrewer color scale
  scale_color_brewer(palette = "Set1") +
  theme(plot.title = element_text(face = "bold", 
                                  size = 12),
        axis.title = element_text(size = 8, 
                                  face = "bold"),
        axis.text = element_text(size = 6),
        legend.title = element_text(size = 10, 
                                    face = "bold"),
           legend.text = element_text(size = 7),
        legend.key.size = unit(.3, "cm"))
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}
# Lab 9 (Part 1.3)
allison_Years <- allison_f %>% 
  group_by(Year) %>%
  summarise(Allisons = sum(Count))
```

-   Example 2

```{r dvs-4-2}
# Challenge 3 (Question 5.1.1 Male vs. Female, Revised  - across())
summary1 <- hiphop_coll |> 
  group_by(sex) |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ mean(.), 
                   na.rm = TRUE))

differences1 <- summary1 |>
  summarize(across(.cols = intl:unclassifiable,
                   .fns = ~ diff(.)))

absdiff1 <- differences1 |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ abs(.)))

which.max(absdiff1)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
# Lab 7 (Part 2.1)
fishData |> summarise(across(.cols = everything(),
                             .fns = ~ sum(is.na(.))))
```

-   Example 2

```{r dvs-5-2}
# Challenge 3 (Question 5.1.1 Male vs. Female, Revised  - across())
summary1 <- hiphop_coll |> 
  group_by(sex) |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ mean(.), 
                   na.rm = TRUE))

differences1 <- summary1 |>
  summarize(across(.cols = intl:unclassifiable,
                   .fns = ~ diff(.)))

absdiff1 <- differences1 |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ abs(.)))

which.max(absdiff1)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}
# Challenge 9 (Part 2)
# https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html#Table_Footnote: boostrap options
al_summary %>%
  knitr::kable(format = "html", 
               align = "crrr",
              caption = "Allans, Alans, and Allens Born In CA & PA") %>%
  kable_styling(full_width = T, 
                font_size = 12, 
                position = "center",
                bootstrap_options = "striped")
```

-   Example 2

```{r dvs-6-2}
# Challenge 3 (Question 5.1.1 Male vs. Female, Revised  - across())
summary1 <- hiphop_coll |> 
  group_by(sex) |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ mean(.), 
                   na.rm = TRUE))

differences1 <- summary1 |>
  summarize(across(.cols = intl:unclassifiable,
                   .fns = ~ diff(.)))

absdiff1 <- differences1 |> 
  summarize(across(.cols = intl:unclassifiable, 
                   .fns = ~ abs(.)))

which.max(absdiff1)
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}
# Challenge 9 (Part 1.2.3 Spelling By State)
finalSummary %>%
  gt() %>%
  fmt_percent(columns = 2:3, decimals = 2) %>%
  cols_label(Allan = "Allan %",
             Alan = "Alan %",
             Allen = "Allen %",
             Total = "Total Number Of Babies Born") %>%
  cols_align(align = "center", columns = everything()) %>%
  tab_header(title = md("**Number Of Babies Born in CA & PA**"))
```

-   Example 2

```{r dvs-7-2}
# Challenge 9 (Part 2)
al_summary %>%
  knitr::kable(format = "html", 
               align = "crrr",
              caption = "Allans, Alans, and Allens Born In CA & PA") %>%
  kable_styling(full_width = T, 
                font_size = 12, 
                position = "center",
                bootstrap_options = "striped")
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
# Lab 9 (Part 1, revised - values_fill())
allisonsSummary <- aNames %>%
  filter(Name == "Allison") %>% 
  group_by(State, Sex) %>%
  summarise(Allisons = sum(Count)) %>%
  pivot_wider(names_from = Sex, values_from = Allisons, values_fill = 0)
```

-   `across()`

```{r pe-1-across}
# Lab 7 (Part 2.1)
fishData |> 
  summarise(across(.cols = everything(),
                             .fns = ~ sum(is.na(.))))
```

-   `map()` functions

```{r pe-1-map-1}
# Lab 8 (Full Phrase Datset (Before Lab 8 Title))
xmas2 <- xmas |>
  mutate(Full.Phrase = pmap_chr(.l = list(Day,
                                          Gift.Item,
                                          Verb,
                                          Adjective,
                                          Location), 
                                .f = make_phrase))
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}
# Lab 7 (Question 3.2)
rescale_01 <- function(x) {
  
  stopifnot(is.numeric(x), length(x) > 1)
  
  min <- min(x, na.rm = TRUE)
  max <- max(x, na.rm = TRUE)
  
  new <- (x - min) / 
         (max - min)
  
  return(new)
}
```

-   Example 2

```{r pe2-2}
# Lab 8 (Question 1)
sing_day <- function(dataset, line, phrase_col) {
  
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <-  ordinal(line)

  intro <- glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases
  phrases <- dataset |>
      pull( {{phrase_col}} )
  
  lineGift <- str_flatten(phrases[ {{line}}:1 ], "\n")
  
  song <- glue("{intro} \n{lineGift}")
  
  return(song)
  
}
```

**PE-3: I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}
# Lab 7 (Part 3.5)
rescale_column <- function(df, var) {
 
  stopifnot(is.data.frame(df))
  
  newDF <- df |> mutate(across(.col = {{var}}, 
                               .fns = ~ rescale_01(.)))
  
  return(newDF)
}
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}
# Lab 8 (Full Phrase Datset (Before Lab 8 Title))
xmas2 <- xmas |>
  mutate(Full.Phrase = pmap_chr(.l = list(Day,
                                          Gift.Item,
                                          Verb,
                                          Adjective,
                                          Location), 
                                .f = make_phrase))
```

```{r pe-3-map-2}
# Lab 8 (Part 2)
full_song <- function(dataset, line, phrase_col) {
  
  chunks <- map_chr(.x = 1:line,
                    .f = ~ sing_day(dataset, 
                                    .x, 
                                    {{phrase_col}}))
  combined <- glue("{chunks}")
  
  return(combined)
  
}
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}
# Lab 7 (Question 3.4)
plusRescale <- fishData |> 
  mutate(`Rescaled Length` = rescale_01(length)) |>
  rename(Length = length)

plusRescale |> 
  pivot_longer(cols = c(Length, `Rescaled Length`), 
               names_to = "Type", 
               values_to = "Length") |>
  ggplot(mapping = aes(x = year, y = Length)) +
  geom_smooth() +
  facet_grid(Type ~ ., scales="free") +
  labs(title = "Rescaled vs. Original Fish Length Values From 1989 to 2006") +
  theme_linedraw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(), 
        plot.title = element_text(face = "bold"))
```

-   Example 2

```{r pe-4-2}
# Lab 3 (Question 13)
summary3 <- hiphop_clean |> filter(sex == "Male", 
                       ethnic_2 == "white", age > 30) |>
  group_by(word) |>
  summarise(meanFamiliarity = mean(familiarity))

summary3 |> slice_min(meanFamiliarity)
summary3 |> slice_max(meanFamiliarity)
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}
# Practice Activity 9 (Part 2.1)
q1 <- qunif(.95, 1.5, 3.5)
q2 <- qnorm(.10, 4.6, 0.8)
q3 <- 1 - pnorm(5, 4.6, 0.8)
q3.2 <- 1 - pnorm(5, 4.6, 0.8)
q4 <- 1 - pchisq(5, 4)
q5 <- rnorm(100, 4.6, 0.8)
```

-   Example 2

```{r dsm-1-2}
# Practice Activity 9 (Part 2.2)
set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, 4.6, .8)
  cornets <- runif(n_cor, 1.5, 3.5)
  reeds <- rchisq(n_reed, 4)
  
  total <- sum(trombones) + sum(cornets) + sum(reeds)  
  return(total)
  
}

my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, 
                                       n_cor = 110,
                                       n_reed = 1035) ) 
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}
# Lab 9 (part 2.2)
broom::tidy(allison_lm)
# Equation = -101.52(Year) + 209689.76
```

-   Example 2

```{r dsm-2-2}
# Lab 9 (part 2.3)
allison_lm %>% 
  broom::augment() %>% 
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point() + 
  labs(title = "Residual Plot: Number of Babies Named Allison From 1997 to 2014",
       y = "Residuals",
       x = "Fitted") +
  theme_linedraw() +
  theme(plot.title = element_text(face = "bold", 
                                  size = 13), 
        panel.background = element_rect(fill = "lightgrey"))
```

## Revising My Thinking

Despite showing proficiency in most of the learning targets, I was bad about a few things in the beginning. This can be seen in my earlier labs (lab 1 and lab 3) where i had insufficient and incorrect plot labels. There was also a lot of repeating and inefficient code in my initial Lab 3 submission. And I do acknowledge my stubborness when it came to adding a new line after every pipe. However, after continuous feed back from my peers and instructor, i was able to revise my thinking and apply feed back i my future assignments. I use my Lab 5 Time Plot as a reference to clear and readable plots, and believe that to be my cleanest and favorite one. I then improved my plot clarity even more, when I created plots in Lab 7 and Challenge 7. I began to incorporate the across function in almost all my labs after receiving feedback regarding efficiency, and revised it to use the most recent version. I have also learned another efficiency technique after creating functions and loops in lab 7 and 8. I completely followed adding of the new line after every pipe in Lab 8 and 9. It was hard for me to follow at first, as the empty an long trailing white space bothered me. However, I now do acknowledge and appreciate adding a new line after every pipe. I understand how this simple instruction can make a difference, especially after several peer reviews. Overall, I believe to have demonstrated a proficiency in revised thinking throughout the entirety of the course. I take each feedback from my professor and peers into account in order to avoid making the same mistakes in the future. I also always made sure to submit a revision when I can despite having only minor issues with my code.

## Extending My Thinking

I believe to have demonstrated extended thinking in most of the activities as I usually refer to external resources. A lot of my extended thinking can be demonstrated by my plots and visuals, especially with its details and aesthetics. A lot of my data visualization examples in this portfolio show that I try to make my plot as aesthetically pleasing by using different plot themes, changing plot label fonts and sizes, and using a color palette, `facet_grid()` function, and an `x_scale_discrete` function. In Lab 9, I made use of relocate function just to switch up the position of the column. I also made sure to add a little bit of creativity and organization in all of my Challenge 9 questions. Throughout the course, I have also made use of different Quarto options to spice up the appearance of my HTML file. This is especially demonstrated in my later labs where I incorporated a table of contents and a different Quarto theme. I have used these applications until the last lab.

## Peer Support & Collaboration

I believe to be highly proficient in peer support and collaboration. In the weeks of doing practice activities with my group, I have been the facilitator, team captain, recorder, and report editor. I believe to be successful in my role in all the weeks as my group and I have been successful in the task, and have established a good relationship inside and outside of the classroom. In terms of peer support, I try to respond to queries on discord when I can, but I mostly help my peers with minor questions regarding labs. I believe to have demonstrated this especially in the data cleansing portion of Lab 4. I used my knowledge gained after attending office hours to help my peers and explain to them the reason behind utilizing `semi-join()` and `anti-join()` instead of using the filter function to cleanse data. When working on labs, I always try to clarify concepts to help my peers understand the process of a certain function. I also share my resources. As for peer reviews, I have been specific with my comments, and also use feedback given to me to asses my peer's task. I try to avoid giving surface level feedback, but I also mention the minor issues for better learning. An example of my favorite feedback is attached in the image below:

![](images/Screen%20Shot%202023-02-19%20at%204.56.59%20PM.png){fig-align="center" width="260"}

For Lab 5, I was given the same feedback with piping my ggplot to avoid creating unnecessary data sets. In this peer review, I made sure to remember the feedback, learn from it, and use it to help my peers improve their output. After week 5, I continued to collaborate and work with my group on the practice activities. On the other hand, I am also open and receptive towards feedback that is given to me.
